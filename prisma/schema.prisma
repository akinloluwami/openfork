generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  name         String?
  username     String?
  email        String        @unique
  password     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  githubUrl    String?
  refreshToken RefreshToken?
  image        String?
  isVerified   Boolean       @default(false)
  github       Github?
  projects     Project[]
  upvotes      Upvote[]
}

model Github {
  id          String   @id @default(cuid())
  githubId    Int      @unique
  createdAt   DateTime @default(now())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  accessToken String   @unique
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Project {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  repository  String   @unique
  logoUrl     String?
  website     String?
  techStack   String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  upvotes     Upvote[]
  views       View[]
}

model Upvote {
  id        String   @id @default(cuid())
  upvoterId String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id])
  upvoter   User     @relation(fields: [upvoterId], references: [id])
}

model View {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
}
